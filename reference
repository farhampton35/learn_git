'git init':		Create an empty Git repository or reinitialize an exisiting one
'git log':		Show commit logs.
	-<number>
	-n <number>
	--max-count = <number>
			Limit the number of commits to output
	--oneline
	--pretty=oneline
			print commits in one line
	--graph
			Draw a text-based graphical representation of the commit history on the left side
	--abbrev-commit
			show only a partial prefix
'git diff':		Show changes between commits, commit and working tree, etc
'git add':		Add file contents to the index
'git rm':		Remove files from the working tree and from the index
'git status':		Displays paths that have differences between the index file and the current HEAD commit, paths that have differences between the working tree and the index file, and paths in the working tree that are not tracked by Git.
'git branch':		List, create, or delete branches
	-d
			Delete a branch
'git reset':		Reset current HEAD to the specified state
	--soft
			Does not touch the index file or the working tree, just reset the head to <commit>
	--mixed
			Reset the index but not working tree and reports what has not been updated. Default action.
	--hard
			Reset the index and working tree.
'git checkout':		Checkout a branch or paths to the working tree.
	<branch>
			Switch to <branch> by updating the index and the files in the working tree.
	-b <branch>
			Cause a new branch to be created and switch to <branch>.
	-- <paths>
			Update the named paths in the working tree from the index file or from a named <tree-ish>
'git merge':		Join two or more development histories together.
	--no-ff
			Create a merge commit even when the merge resolves as a fast-forward.
'git stash':		Stash the changes in a dirty working directory away.
	list
			List the stashes that you currently have.
	pop
			Remove a single stashed state from the stash list and apply it on top of the current working tree state.
	apply
			Do not remove the state from the stash list.
	drop
			Remove a single stashed state.
'git tag':		Create, list ,delete or verify a tag object signed with GPG.
	<tagname> <commit id>
			Create a tag for a commit.
	-d
			Delete existing tags with the given names
	-m <msg>
			Use the given tag message.
